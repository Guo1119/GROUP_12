import os
import sys
import pandas as pd 
import numpy as np
import seaborn as sns
import ast
import matplotlib.pyplot as plt

from typing import Union

script_dir = os.path.dirname(os.path.abspath(__file__))
os.chdir(script_dir)

import datafetchtools


class analyzer:
    """
    A class to perform three kinds of quick analysis for movie data from CMU dataset. By calling the built-in methods,
    the analyzer object can generate indicated pandas DataFrame, and return plot generated by matplotlib(if possible).
    ...

    Attributes
    ----------
    gzipPath : str
        default path for downloading and storing the original ".tar.gz" file downloaded from the official link.
    movieMetaDataPath : str
        default path for storing 'movie.metadata.tsv' extracted from zipped file.
    movieMetaDataColumns : list
        list of default column names for movieData
    movieData: pandas.DataFrame
        DataFrame of movie data loaded from 'movie.metadata.tsv'
    characterMetaDataPath : str
        default path for storing character.metadata.tsv extracted from zipped file.
    characterMetaDataColumns : list
        list of default column names for characterData
    characterData : pandas.DataFrame
        DataFrame of character data loaded fron 'character.metadata.tsv' 

    Methods
    -------
    movie_type(N=10):
        Return a panda.Series showing how many times a genre in top N genres shows up in the database.
    actor_count():
        Return a histogram of "number of actors" vs "movie counts". 
    actor_distributions():
        Return an actor data in pandas.DataFrame under 3 given conditions or plot the distribution of filtered actorData.
    """

    def __init__(self):
        # Indicate paths and creates lists for column names
        self.gzipPath="..\\downloads\\MovieSummaries.tar.gz"
        self.movieMetaDataPath="..\\data\\MovieSummaries\\movie.metadata.tsv"
        self.movieMetaDataColumns=['wikiID', 'fbID', 'movieName', 'releaseDate', 'boxRevenue', 'runtime', 'language', 'country', 'genre']
        self.characterMetaDataPath="..\\data\\MovieSummaries\\character.metadata.tsv"
        self.characterMetaDataColumns=['wikiID', 'fbID', 'releaseDate', 'characterName', 'actorBirthday', 'actorGender', 'actorHeight', 
                                       'actorEthnicityID','actorName', 'ageAtRelease', 'fbMapID', 'fbCharacterID','fbActorID']
        
        try:
            # try to load datasets
            print("Connceting to the datasets ...")
            self.movieData=pd.read_csv(self.movieMetaDataPath, sep="\t", names=self.movieMetaDataColumns, on_bad_lines='skip')
            self.characterData=pd.read_csv(self.characterMetaDataPath, sep="\t", names=self.characterMetaDataColumns, on_bad_lines='skip')  

        except:
            # if the datasets don't exist in the local directory
            datafetchtools.downloadData("https://www.cs.cmu.edu/~ark/personas/data/MovieSummaries.tar.gz", self.gzipPath)
            datafetchtools.extractData("..\\downloads\\MovieSummaries.tar.gz", "..\\data")

        finally:
            # load again
            self.movieData=pd.read_csv(self.movieMetaDataPath, sep="\t", names=self.movieMetaDataColumns, on_bad_lines='skip')
            self.characterData=pd.read_csv(self.characterMetaDataPath, sep="\t", names=self.characterMetaDataColumns, on_bad_lines='skip')
            print("Successfully connected to the datasets")

    def movie_type(self, N: int =10) -> pd.Series:
        """
        Calculate a non-duplicated pandas.Series with columns same as genres in the movie data and how many times they show up.

        Args:
            N(int): Show only top N genre

        Returns:
            pandas.Series: The movie type counts data

        Example:
            >>> movieAnalyzer = analyzer()
            >>> analyzer.movie_type(N=5)
        """
        if type(N) != int:
            raise TypeError("'N' must be an integer!")
        
        # Take the column "genres" out and form lists using the values of dictionary 
        genres=self.movieData.genre.apply(lambda x: list(ast.literal_eval(x).values()))
        # A native feature of pandas that breaks down columns made of list into new entries
        genresExploded=genres.explode(ignore_index=True)
        genresExploded.rename("Movie_Type", inplace=True)
        return genresExploded.value_counts()[1:N]
    
    def actor_count(self) -> plt.figure:
        """
        Plot a histogram of "Number of Actors" vs. "Movie Counts"

        Returns:
            matplotlib.pyplot.figure: A figure showing the histogram

        Example:
            >>> movieAnalyzer = analyzer()
            >>> movieAnalyzer.actor_count()
        """

        # Use value_counts() to count how many times a wikiID occurs in the Character dataset
        # Create a new dataframe using .join(), having columns: wikiID, movieName, actorCounts
        countData=self.movieData[["wikiID", "movieName"]].join(self.characterData['wikiID'].value_counts().astype("Int64"), on="wikiID")
        countData.rename(columns={"count": "actorCounts"}, inplace=True)

        # Make sure can be executed in terminal and return a figue
        plt.figure(figsize=(8, 6))
        sns.histplot(data=countData,x="actorCounts",bins=40)
        plt.xlabel("Number of Actors")
        plt.ylabel("Movie Counts")
        plt.title("Number of Actors vs. Movie Counts")
        plt.show()
    
    def actor_distributions(self, max_height: float = 3.0, min_height:float = 0.0, gender:str = "All", plot:bool = False) -> Union[pd.DataFrame, plt.figure]:
        """
        Calculate a non-duplicated actor data with actors' name, gender and height under three search conditions. 
        Set `plot` to true to plot histogram.

        Args:
            max_height(float): The maximum height float number.
            max_height(float): The minimum height in float number.
            gender(str): Actor gender in string, choose from "M", "F" and "All"

        Returns:
            pandas.DataFrame: The actor data under search conditions
            matplotlib.pylot.figure: A figure showing the distribution in histogram

        Example:
            >>> movieAnalyzer = analyzer()
            >>> analyzer.actor_distributions(max_height=2.2, min_height=1.0)
        """

        if type(gender) != str:
            raise TypeError("'gender' must be a string")
        
        if not isinstance(max_height, (int, float)) or not isinstance(min_height, (int, float)):
            raise TypeError("'max_height' and 'min_height' should be numerical values")
        
        actorData = self.characterData[["actorName", "actorGender", "actorHeight"]].drop_duplicates()

        if gender == "All":
            actorDataConstraint=actorData
        else:
            actorDataConstraint=actorData[actorData.actorGender == gender]
        
        actorDataConstraint=actorDataConstraint[(actorDataConstraint.actorHeight > min_height) 
                                                    & (actorDataConstraint.actorHeight < max_height)]
        if plot == True:
            plt.figure(figsize=(12, 6))
            sns.histplot(actorDataConstraint, x="actorHeight")
            plt.xlabel("Actor Height")
            plt.ylabel("Number of Actors")
            plt.show()
        else:
            return actorDataConstraint
